//#include <boost/graph/graph_traits.hpp>
//#include <boost/graph/adjacency_list.hpp>
//#include <boost/graph/breadth_first_search.hpp>
//#include <boost/pending/indirect_cmp.hpp>
//#include <boost/pending/integer_range.hpp>
#include "mbu.h"
#include <iostream>
#include <utility>
#include <algorithm> 
#include <vector>
using namespace std;


void trreverse(char* begin, char* end);
void itoa(int value, char* str, int base);

MBU::MBU(Core* core){
	S_sim = new float[core->gate_numbers];
	S_sim_var = new float[core->gate_numbers];
	S_sim_ff = new float[core->gate_numbers];
	S_sim_po = new float[core->gate_numbers];
	S_sim_ff_po = new  float[core->gate_numbers];
	
	S_sim_vec = vector< vector<ser> >(core->gate_numbers, vector<ser>());
	S_mlet_vec = vector< vector<ser> >(core->gate_numbers, vector<ser>());
	
	pi = new short[core->nodes+1];
	dfs_fnum = new short[core->nodes+1];
    //Clear dfs_fnum[], which records blackened timestamps
	for (int i=0; i<=core->nodes; i++)
        dfs_fnum[i] = 0;
}

MBU::~MBU(void){
	delete S_sim ;
	delete S_sim_var ;
	delete S_sim_ff ;
	delete S_sim_po; 
	delete S_sim_ff_po ;
}


void MBU::inject_fault(struct gate *gateptr, int time, int width){
	struct event* eventptr = new struct event;
	eventptr->time = time;
	eventptr->p0 = 0; eventptr->p1=0; eventptr->pd=1-gateptr->value; eventptr->pdn=gateptr->value;
	gateptr->event_list.push_back(eventptr);
	
	eventptr = new struct event;
	eventptr->time = time+ width;
	eventptr->p0 = 1-gateptr->value; eventptr->p1=gateptr->value; eventptr->pd=0; eventptr->pdn=0;
	gateptr->event_list.push_back(eventptr);
}


void MBU::inject_fault_analytical(struct gate *gateptr,int width){
	struct event* eventptr = new struct event;
	eventptr->time = 0;
	eventptr->p0 = 1- gateptr->signal_probability; eventptr->p1 = gateptr->signal_probability;
	eventptr->pd = 0; eventptr->pdn = 0;
	gateptr->event_list.push_back(eventptr);
	
	eventptr = new struct event;
	eventptr->time = (int)gateptr->gd;
	//based on 0^e, 1^e fault propagation system
	eventptr->p0 = 0; eventptr->p1 = 0; eventptr->pd =  gateptr->signal_probability; eventptr->pdn = 1- gateptr->signal_probability;
	gateptr->event_list.push_back(eventptr);
	
	eventptr = new struct event;
	eventptr->time = (int)gateptr->gd + width;
	//APPROACH 1
	eventptr->p0 = 1 - gateptr->signal_probability ; eventptr->p1 = gateptr->signal_probability; eventptr->pd = 0; eventptr->pdn = 0;
	//APPROACH 2
	//eventptr->p0 = 0; eventptr->p1 = 0; eventptr->pd = 0; eventptr->pdn = 1;
	gateptr->event_list.push_back(eventptr);
}

void MBU::report(Core* core, FILE* resultfp){
	// reporting results:
	int sim_gate_numbers = core->sim_gate_numbers ;
	float sim_epp_total=0, sim_epp_ff=0, sim_epp_ff_po=0, sim_epp_po=0;
	for (int i=0; i<sim_gate_numbers; i++){
		sim_epp_total += S_sim[i];
		sim_epp_ff += S_sim_ff[i] ;
		sim_epp_ff_po += S_sim_ff_po[i] ;
		sim_epp_po += S_sim_po[i];
		printf("gate sim epp: gate[%d]=%f\n",i,S_sim[i]);
	}
	
	sim_epp_total = sim_epp_total/sim_gate_numbers;    
	sim_epp_ff = sim_epp_ff / sim_gate_numbers;   
	sim_epp_ff_po = sim_epp_ff_po /sim_gate_numbers;  
	sim_epp_po = sim_epp_po/sim_gate_numbers;
	printf("average sim epp: %f \n", sim_epp_total);
	printf("average sim epp (ff): %f \n", sim_epp_ff);	
	printf("average sim epp (ff-po): %f \n", sim_epp_ff_po);
	printf("average sim epp (po): %f \n", sim_epp_po);
}


void MBU::dfs_fvisit (vector <deque<struct gate*> > &fadjlist, short u, Core* core){
    core->color[u] = 'g';
    for(int i=0; i<fadjlist[u].size(); i++){
        struct gate *p = fadjlist[u][i];
        short v = p->out;
        if(core->color[v] == 'w'){
			pi[v] = u;
            dfs_fvisit(core->fadjlist, v, core);    // Recursive call
        }
    }
    core->color[u] = 'b';
    dfs_fnum[u] = ++final_time_stamp;
}


void MBU::find_TPsort_from_dffi(short nff_index, Core* core,configuration* config){
	int i,j;
	deque <short> tmp_constant;
	struct gate *p;
	
	core->PI2POlist.clear();
	core->color.clear();
	for(i=1; i<=core->nodes; i++)
	{
		core->color.push_back('w');
		pi[i] = config->MAX;
	}
	for (i=0; i<core->dff_num; i++)
		core->color[core->dfflist_ptr[i]->q]='g';
	
	// 2nd Apply DFS starting from node nff_index
	pi[nff_index] = 0;
	final_time_stamp = 0;
	dfs_fvisit(core->fadjlist, nff_index, core);
	
	for(i=1; i<core->nodes; i++){
		if (pi[i] != config->MAX)
		{
			tmp_constant.clear();
			tmp_constant.push_back(i);
			core->PI2POlist.push_back(tmp_constant);
		}
	}
	
	//sort the PI2POlist
	short PI2POlist_size = core->PI2POlist.size();
	for (i=0; i < (PI2POlist_size-1); i++){
		for (j=i+1; j<PI2POlist_size; j++){
			if (dfs_fnum[core->PI2POlist[i][0]] < dfs_fnum[core->PI2POlist[j][0]]){
				short val = core->PI2POlist[i][0];
				core->PI2POlist[i][0] = core->PI2POlist[j][0];
				core->PI2POlist[j][0] = val;
			}
		}
	}
	
	//Here we creating forward-adjancy list for on-path gates
	for (i=0; i<core->PI2POlist.size(); i++){
		for (j=0; j<core->fadjlist[core->PI2POlist[i][0]].size(); j++){
			p = core->fadjlist[core->PI2POlist[i][0]][j];
			if (pi[p->out] != config->MAX){
				core->PI2POlist[i].push_back(p->out);
			}
		}
	}
}



void MBU:: system_failure_simulation(Core* core, configuration* config, FILE* resultfp, FaultGenerator* fg, FaultSiteGenerator* fsg){
}
//TODO: start writing!

void MBU:: system_failure_analysis(Core* core, configuration* config, FILE* resultfp, FaultGenerator* fg, FaultSiteGenerator* fsg){
	long i,j,k;
	float total_derating_sum=0;
	float total_derating_iter=0;
	//short nff_index;
	short PI2POlist_size;
	struct gate *gateptr;
	int tsum,tk;
	float tpsum;
	struct event* eventptr;
	int list_size;
	int max_event_size=0;
	
	for (int ff_index=0; ff_index<core->gate_numbers; ff_index++){
		//nff_index = core->gate_list[ff_index]->out;
		//The comment can be removed!!
		if ((core->gate_list[ff_index]->is_dff == 1) || (core->gate_list[ff_index]->out <= (core->numPi+core->numPo))){
			core->gate_list[ff_index]->derating = 1;
			S_mlet_vec[ff_index].push_back( ser(0,0,1) );
			total_derating_sum += 1 ;
			total_derating_iter++ ;
			continue;
		}
		for(int mbu_index=1; mbu_index<2; mbu_index++){
			// To get PI2POlist starting from flip-flop nff_index excluding it
			find_TPsort_from_dffi(core->gate_list[ff_index]->out, core, config);
			PI2POlist_size = core->PI2POlist.size();
			// Set MAX values to ensure each will get correct value
			for (i=0; i<core->gate_numbers; i++){
				gateptr= core->gate_list[i];
				gateptr->p0 = 0; gateptr->p1 = 0;
				gateptr->pd = 0; gateptr->pdn = 0;
				gateptr->is_onpath = false;
			}
			cout << "we reached here" << endl ;
			for (i=0; i<PI2POlist_size; i++){
				gateptr = core->fadjlist_ptr[core->PI2POlist[i][0]];
				gateptr->p0 = config->MAX; gateptr->p1 = config->MAX;
				gateptr->pd = config->MAX; gateptr->pdn = config->MAX;
				gateptr->is_onpath = true;
			}
			gateptr = core->gate_list[ff_index];
			cout << "we're here" << endl ;
			/*
			if( mbu_index==0 ){//this gate
				inject_fault_analytical( gateptr, config->seu_pulse_width);
			}else if(mbu_index <= core->gate_list[ff_index]->forward_list.size() ){//forward
				//target + fan-in
				inject_fault_analytical( gateptr, config->seu_pulse_width);
				inject_fault_analytical( core->gate_list[ff_index]->forward_list[mbu_index-1], config->seu_pulse_width);
			}else if(mbu_index <= core->gate_list[ff_index]->forward_list.size() + core->gate_list[ff_index]->backward_list.size()){//backward
				//target+fan-out
				inject_fault_analytical( gateptr,  config->seu_pulse_width);
				inject_fault_analytical( core->gate_list[ff_index]->backward_list[mbu_index-core->gate_list[ff_index]->forward_list.size()-1], config->seu_pulse_width);
			}else if( mbu_index <= core->gate_list[ff_index]->forward_list.size() + core->gate_list[ff_index]->backward_list.size() + number_of_common_fanin_injection ){
				//common-fan-in	
				for(int i=0;i<core->gate_list[ff_index]->forward_list.size();i++){
					for(int j=i+1; j<core->gate_list[ff_index]->forward_list.size();j++){
						inject_fault_analytical( core->gate_list[ff_index]->forward_list.at(i) , config->seu_pulse_width);
						inject_fault_analytical( core->gate_list[ff_index]->forward_list.at(j) , config->seu_pulse_width);
					}
				}
			}else{
				//common-fanout
				for(int i=0;i<core->gate_list[ff_index]->backward_list.size();i++){
					for(int j=i+1; j<core->gate_list[ff_index]->backward_list.size();j++){
						inject_fault_analytical( core->gate_list[ff_index]->backward_list.at(i) , config->seu_pulse_width);
						inject_fault_analytical( core->gate_list[ff_index]->backward_list.at(j) , config->seu_pulse_width);
					}
				}
			}
			
			for (i=0; i<PI2POlist_size; i++){
				gateptr = core->fadjlist_ptr[core->PI2POlist[i][0]];
				compute_D_gate_event_list(gateptr, core->gate_list[ff_index]->out,config,core);
				if (gateptr->event_list.size()>max_event_size)
					max_event_size = gateptr->event_list.size();
			}// End of PI2POlist
			
			
			int ff_index2;
			for (ff_index2=0; ff_index2<core->dff_num; ff_index2++){
				gateptr = core->fadjlist_ptr[core->dfflist_ptr[ff_index2]->q];
				compute_D_gate_event_list(gateptr, core->gate_list[ff_index]->out,config,core);
				if (gateptr->event_list.size()>max_event_size)
					max_event_size = gateptr->event_list.size();
			}
			short MAXS=3,NMAXS=-1;
			float sys_failure=1;
			int ff_ind;
			for (ff_ind=0; ff_ind<core->dff_num; ff_ind++){
				gateptr = core->fadjlist_ptr[core->dfflist_ptr[ff_ind]->q];
				list_size = gateptr->event_list.size();
				tpsum = 0;
				tsum = 0;
				for (k=0; k<gateptr->event_list.size()-1; k++){
					tk = gateptr->event_list[k+1]->time - gateptr->event_list[k]->time;
					if ( (gateptr->event_list[k]->vomax > (VDD/2.0)) && (gateptr->event_list[k]->vomin < (VDD/2.0)))
						tpsum += tk * (gateptr->event_list[k]->pd+gateptr->event_list[k]->pdn);
					tsum += tk;
				}
				//if (tsum != 0) sys_failure *= 1- ((float)tpsum+(config->t_hold + config->t_setup)*(float)tpsum/(float)tsum)/(float)config->tperiod;
				if (tsum != 0) sys_failure *= 1- ((float)tpsum+config->t_hold + config->t_setup)/(float)config->tperiod;
				//if (tsum != 0) sys_failure *= 1- ((float)tpsum-(config->t_hold + config->t_setup))/((float)config->tperiod - config->seu_pulse_width );
			}//for (ff_ind=0; ....
			//Need revise.
			for (int gate_index=0; gate_index<core->gate_numbers; gate_index++){
				gateptr = core->gate_list[gate_index];
				if (gateptr->po_no>=0) sys_failure *= 1 - (gateptr->pd + gateptr->pdn);
			}
			
			sys_failure = 1 - sys_failure;
			//ff_index is gate_list index
			gateptr = core->gate_list[ff_index]; 
			gateptr->derating = sys_failure;
			S_mlet_vec[ff_index].push_back( ser(0,0,sys_failure) );
			total_derating_sum += sys_failure ;
			total_derating_iter++ ;
			for (i=0;i<core->gate_numbers; i++){
				gateptr = core->gate_list[i];
				list_size = gateptr->event_list.size();
				
				for (j=list_size-1; j>=0; j--){
					eventptr = gateptr->event_list[j];
					delete eventptr;
					eventptr = NULL;
					gateptr->event_list.pop_back();
				}
			}*/
		}//mbu
		/*
		float sum = 0;
		for(int i=0;i<total_mbu_simulation_per_gate-1;i++){
			sum += S_mlet_vec[ff_index].at(i).derating ;
		}
		sum /= total_mbu_simulation_per_gate-1;
		core->gate_list[ff_index]->derating = sum;*/
	}//for
	/*
	float overall_sys_der = 0;
	for (i=0; i<core->gate_numbers; i++){
		gateptr = core->gate_list[i];
		//if (gateptr->is_dff==1)
		//	continue;
		//fprintf(resultfp, "Gate %d = %f \n",gateptr->out, gateptr->derating);
		overall_sys_der += gateptr->derating;
	}
	overall_sys_der = overall_sys_der / (float)(core->gate_numbers);	// ???
	fprintf(resultfp,"\n ================================= \n");
	fprintf(resultfp,"Overall Systematic Derating = %f \n", overall_sys_der);
	fprintf(resultfp,"Overall Systematic derating per unit = %f \n", total_derating_sum/total_derating_iter);
	fprintf(resultfp, "Max event size in systematic derating=%d \n", max_event_size);
	 */
}


#pragma once
#include "configuration.h"
#include "core.h"
#include "defines.h"
#include "faultgen.h"
#include "faultsite.h"


struct ser{
	short type;	//0: only gate itself, 1: gate+ common fan-out, 2: gate+ common-fan-in 3:gate+ both common-fanout & common-fanin
	short index;
	float derating;	
	ser(short t, short i, float v){	type=t; index=i, derating=v; }
};

class MBU
{
	//for DFS alg. in topological sort.
	short* pi; // it is used for dfs algorithm
	short* dfs_fnum; // To detecte finalize number (black) after dfs completion
	short final_time_stamp; // is used for topological sorting number during DFS algorithm
	
	float* S_sim;			//System failure probability vector obtained from simulation (for POs only), multi cycle
	float* S_sim_var;		//Variances of system failure probability vector obtained from simulation
	float* S_sim_ff;		//System failure probability if we choose only DFFs at fault site only at first cycle
	float* S_sim_ff_po;		//System failure probability if we choose both POs DFFs at fault site only at first cycle
	float* S_sim_po;		//System failure probability if we choose only POs at fault site only at first cycle
	
	vector< vector<ser> > S_sim_vec ;
	vector< vector<ser> > S_mlet_vec;
	
	void find_TPsort_from_dffi(short,Core*,configuration*);
	void dfs_fvisit (vector <deque<struct gate*> > &fadjlist, short u, Core* core);
	void inject_fault(struct gate *gateptr, int time, int width);
	void inject_fault_analytical(struct gate *gateptr,int width);
	
public:
	MBU(Core* core);
	~MBU(void);
		
	void system_failure_simulation(Core* core, configuration* config, FILE*, FaultGenerator* fg, FaultSiteGenerator* fsg);
	void system_failure_analysis(Core* core, configuration* config, FILE*, FaultGenerator* fg, FaultSiteGenerator* fsg);
	void report(Core* core, FILE* resultfp);
};
